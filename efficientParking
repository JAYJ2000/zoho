import Foundation

enum type{
    case bike,car
}

struct VehicleDetails{
    var totalCarSlot:Int!
    var carSlot:[String] = []  
    var totalBikeSlot:Int!
    var bikeSlot:[String] = []
}

class Vehicle{
  
  var vehicledetails = VehicleDetails()
  
  func totalSlots(){                      //Total Slot allocation
    var totalCarSlot: Int
    var totalBikeSlot: Int

    print("Enter total bike slot")
    if let totalBikeSlotInput = readLine(){
      totalBikeSlot = totalBikeSlotInput.toInt()
      
    print("Enter total car slot")
    if let totalCarSlotInput = readLine(){
      totalCarSlot = totalCarSlotInput.toInt()
            
    if totalCarSlot > 0 || totalBikeSlot > 0{
      vehicledetails.totalBikeSlot = totalBikeSlot
      vehicledetails.bikeSlot = Array(repeating: "", count: totalBikeSlot)
      vehicledetails.totalCarSlot = totalCarSlot
      vehicledetails.carSlot = Array(repeating: "", count: totalCarSlot)
      self.menu()
    }else{print("Atleast 1 slot is needed")}
    }}}

  func menu(){                            //Menu
    var userChoice:Int = -1
    repeat{
    print("""
          \n
              MENU
              ~~~~  
          1.Park bike
          2.Bike parking details
          3.Available slot for bike
          4.Search bike by slot
          5.Search bike by number plate
          6.Departing bike
          
          7.Park car
          8.Car parking details
          9.Available slot for car
          10.Search car by slot
          11.Search car by number plate
          12.Departing car
          
          0.Exit
         """)
    if let userChoiceInput = readLine(){
        userChoice = userChoiceInput.toInt()
        switch(userChoice){
          case 0:
          return
          case 1:
          vehicledetails.totalBikeSlot > 0 ? addVehicle(vehicleType: type.bike) : print("No slot found")
          case 2:
          self.parkedDetails(vehicleList: vehicledetails.bikeSlot)
          case 3:
          self.availableSlot(available: vehicledetails.bikeSlot)
          case 4:
          self.searchVehicleBySlot(vehicleList: vehicledetails.bikeSlot)          
          case 5:
          searchVehicleByNumber(vehicleList: vehicledetails.bikeSlot)  
          case 6:
          let foundValue = self.departing(vehicleList: vehicledetails.bikeSlot)
          if foundValue >= 0{
            vehicledetails.bikeSlot[foundValue] = ""
            print("Vehicle departed successfully")
          }              
          case 7:
          vehicledetails.totalCarSlot > 0 ? addVehicle(vehicleType: type.car) : print("No slot found")
          case 8:
          self.parkedDetails(vehicleList: vehicledetails.carSlot)
          case 9:
          self.availableSlot(available: vehicledetails.carSlot)
          case 10:
          self.searchVehicleBySlot(vehicleList: vehicledetails.carSlot)
          case 11:
          self.searchVehicleByNumber(vehicleList: vehicledetails.carSlot)
          case 12:
          let foundValue = self.departing(vehicleList: vehicledetails.carSlot)
          if foundValue >= 0{
            vehicledetails.carSlot[foundValue] = ""
            print("Vehicle departed successfully")
          }     
          
          default :
          print("Invalid input")
        }          
    }}while(userChoice != 0)
  }
  
                        //1,7 return whether adding vehicle number is valid
    func addVehicle(vehicleType: type){
      var slotNumber:Int
      print("Enter the vehicle number")
      if let vehicleNumber = readLine(){
  
        guard !(vehicledetails.carSlot.contains(vehicleNumber) || vehicledetails.bikeSlot.contains(vehicleNumber)) else{
            print("Vehicle is already found")
            return}
        
          availableSlot(available: vehicleType == type.bike ? vehicledetails.bikeSlot : vehicledetails.carSlot)
        
         print("Enter slot number")
        if let slotNumberInput = readLine(){
          slotNumber = slotNumberInput.toInt()
          guard slotNumber >= 0 || slotNumber < (vehicleType == type.bike ? vehicledetails.totalBikeSlot : vehicledetails.totalCarSlot)
          else{
            print("No slot found")
            return
          }
          
          switch vehicleType{
            case .bike:
if vehicledetails.bikeSlot[slotNumber] == "" {
vehicledetails.bikeSlot[slotNumber] = vehicleNumber
print("vehicle allocated successfully")}
            else{print("Slot already have bike")}       
            case .car:
if vehicledetails.carSlot[slotNumber] == "" {
vehicledetails.carSlot[slotNumber] = vehicleNumber}
            else{print("Slot already have car") }       
    }}}}
  
                                      //2,8 Parked details
  func parkedDetails(vehicleList:[String]){
    for index in 0...vehicleList.count-1{
      print("\(index) - \(vehicleList[index] == "" ? "Availabe" : vehicleList[index])")
    }
  }
                      //3,9 Available slot
    func availableSlot(available : [String]){
        print(available.indices.filter{available[$0] == "" })
    }
                    //4,10 search vehicle by slot
    func searchVehicleBySlot(vehicleList: [String]){
      print("Enter the slot to search")
          var number:Int
          if let slotSearchInput = readLine(){
            number = slotSearchInput.toInt()
      if number >= 0 && number < vehicleList.count{
        print("At slot \(number)  \(vehicleList[number] == "" ? "No vehicle found" : vehicleList[number])")}
      else{print("No slot found")}
    }}
                      //5,11 Search Vehicle by plate number
    func searchVehicleByNumber(vehicleList: [String]){
      print("Enter the Bike number to search")
          if let number = readLine(){
      if (vehicleList.filter{$0.localizedCaseInsensitiveContains(number)}).count == 0{
              print("No vehicle found");return}
        print("VehicleNumber \(number) - \(vehicleList.indices.filter{vehicleList[$0].localizedCaseInsensitiveContains(number)})")
    }}
    
                      //6,12 return whether depart vehicle number is valid
    func departing(vehicleList : [String]) -> Int{
      print("Enter vehicle Number")
      guard let number = readLine()else{return -1}
        if (vehicleList.filter{$0.localizedCaseInsensitiveContains(number)}).count == 1{
          let vehicleFoundIndex = vehicleList.indices.filter{vehicleList[$0].localizedCaseInsensitiveContains(number)}
          let departVehicle:Int = vehicleFoundIndex[0]
          print(departVehicle)
            return departVehicle
        }
        else if (vehicleList.filter{$0.localizedCaseInsensitiveContains(number)}).count > 1{
            print("More than one vehicle found with this number, Give more detail")
          return -1
        }
        else{print("Vehicle not found");return -1}
    }
}  

extension String{
  func toInt() -> Int{
  return Int(self) ?? 0
}}

let vehicle = Vehicle()
vehicle.totalSlots()

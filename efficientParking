import Foundation

struct ParkingLog{
  var slotNumber:Int
  var vehicleNumber:String
  var fromDate:String
  var toDate: String?
}

struct VehicleDetails{
    var totalCarSlot = 0
    var carSlot:[String] = []  
    var totalBikeSlot = 0
    var bikeSlot:[String] = []
}

class Parking{

  var vehicledetails = VehicleDetails()
  var bikeparkinglog:[ParkingLog] = []
  var carparkinglog:[ParkingLog] = []

  func totalSlots(){                      //Total Slot allocation

    print("Enter total bike slot")
    if let totalBikeSlotInput = readLine(){
      vehicledetails.totalBikeSlot = totalBikeSlotInput.toInt()
      
    print("Enter total car slot")
    if let totalCarSlotInput = readLine(){
      vehicledetails.totalCarSlot = totalCarSlotInput.toInt()
            
    if vehicledetails.totalCarSlot > 0 || vehicledetails.totalBikeSlot > 0{
      vehicledetails.bikeSlot = Array(repeating: "", count: vehicledetails.totalBikeSlot)
      vehicledetails.carSlot = Array(repeating: "", count: vehicledetails.totalCarSlot)
      self.menu()
    }else{print("Atleast 1 slot is needed")}
    }}}

  func menu(){                            //Menu
    var userChoice:Int = -1
    repeat{
    print("""
          \n
              MENU
              ~~~~  
          1.Park bike
          2.Bike parking details
          3.Available slot for bike
          4.Search bike by slot
          5.Search bike by number plate
          6.Departing bike
          
          7.Park car
          8.Car parking details
          9.Available slot for car
          10.Search car by slot
          11.Search car by number plate
          12.Departing car

          13.Bike log
          14.Car log
          0.Exit
         """)
    if let userChoiceInput = readLine(){
        userChoice = userChoiceInput.toInt()
        switch(userChoice){
          case 0:
          return
          case 1:
          vehicledetails.totalBikeSlot > 0 ? addVehicle(vehicleSlot: &vehicledetails.bikeSlot , vehicleSlot2: vehicledetails.carSlot , log: &bikeparkinglog) : print("No slot found")
          case 2:
          vehicledetails.totalBikeSlot > 0 ? self.parkedDetails(vehicleList: vehicledetails.bikeSlot) : print("No slot found")
          case 3:
          self.availableSlot(available: vehicledetails.bikeSlot)
          case 4:
          self.searchVehicleBySlot(vehicleList: vehicledetails.bikeSlot)          
          case 5:
          searchVehicleByNumber(vehicleList: vehicledetails.bikeSlot)  
          case 6:
          self.departing(vehicleList: &vehicledetails.bikeSlot,log: &bikeparkinglog)        
          case 7:
          vehicledetails.totalCarSlot > 0 ? addVehicle(vehicleSlot: &vehicledetails.carSlot, vehicleSlot2 : vehicledetails.bikeSlot, log: &carparkinglog) : print("No slot found")
          case 8:
          vehicledetails.totalCarSlot > 0 ? self.parkedDetails(vehicleList: vehicledetails.carSlot) : print("No slot found")
          case 9:
          self.availableSlot(available: vehicledetails.carSlot)
          case 10:
          self.searchVehicleBySlot(vehicleList: vehicledetails.carSlot)
          case 11:
          self.searchVehicleByNumber(vehicleList: vehicledetails.carSlot)
          case 12:
          self.departing(vehicleList: &vehicledetails.carSlot,log: &carparkinglog)  
          case 13:
          self.log(structObject: &bikeparkinglog)
          case 14:
          self.log(structObject: &carparkinglog)
          default :
          print("Invalid input")
        }          
    }}while(userChoice != 0)
  }
  
                        //1,7 Add vehicle
    func addVehicle(vehicleSlot : inout [String] , vehicleSlot2: [String] , log : inout [ParkingLog]){
      var slotNumber:Int
      print("Enter the vehicle number")
      if let vehicleNumber = readLine(){
  
        guard !(vehicleSlot.contains(vehicleNumber) || vehicleSlot2.contains(vehicleNumber)) else{
            print("Vehicle is already found")
            return}
        
          availableSlot(available: vehicleSlot)
        
         print("Enter slot number")
        if let slotNumberInput = readLine(){
          slotNumber = slotNumberInput.toInt()
          guard slotNumber >= 0 && slotNumber < vehicleSlot.count
          else{
            print("No slot found")
            return
          }
            
if vehicleSlot[slotNumber] == "" {
  vehicleSlot[slotNumber] = vehicleNumber
  log.append(ParkingLog(slotNumber: slotNumber, vehicleNumber: vehicleNumber, fromDate: self.currentDate()))
  print("vehicle parked successfully")}
            else{print("Slot already have vehicle")}   
      
    }}}
  
                      //2,8 Parked details
  
  func parkedDetails(vehicleList:[String]){
    for index in 0...vehicleList.count-1{
      print("\(index) - \(vehicleList[index] == "" ? "Availabe" : vehicleList[index])")
    }
  }
                      //3,9 Available slot
  
    func availableSlot(available : [String]){
        print(available.indices.filter{available[$0] == "" })
    }
                    //4,10 search vehicle by slot
  
    func searchVehicleBySlot(vehicleList: [String]){
      print("Enter the slot to search")
          var number:Int
          if let slotSearchInput = readLine(){
            number = slotSearchInput.toInt()
      if number >= 0 && number < vehicleList.count{
        print("At slot \(number)  \(vehicleList[number] == "" ? "No vehicle found" : vehicleList[number])")}
      else{print("No slot found")}
    }}
                      //5,11 Search Vehicle by plate number
  
    func searchVehicleByNumber(vehicleList: [String]){
      print("Enter the Bike number to search")
          if let number = readLine(){
      if (vehicleList.filter{$0.localizedCaseInsensitiveContains(number)}).count == 0{
              print("No vehicle found");return}
        print("VehicleNumber \(number) - \(vehicleList.indices.filter{vehicleList[$0].localizedCaseInsensitiveContains(number)})")
    }}
    
                      //6,12 return whether depart vehicle number is valid
  
    func departing(vehicleList : inout [String],log : inout [ParkingLog]){
      print("Enter vehicle Number")
      guard let number = readLine()else{return}
        if (vehicleList.filter{$0.localizedCaseInsensitiveContains(number)}).count == 1{
          let vehicleFoundIndex = vehicleList.indices.filter{vehicleList[$0].localizedCaseInsensitiveContains(number)}
          let departVehicle:Int = vehicleFoundIndex[0]
             
      for index in  stride(from: log.count-1, through: 0, by: -1) where log[index].slotNumber == departVehicle{//depart
            log[index].toDate = currentDate()
            break}
            vehicleList[departVehicle] = ""
            print("Vehicle departed successfully")
          
        }
        else if (vehicleList.filter{$0.localizedCaseInsensitiveContains(number)}).count > 1{
            print("More than one vehicle found with this number, Give more detail")
        }
        else{print("Vehicle not found")}
    }
                                          //Date function
  
  func currentDate() -> String{
    let dateformatter = DateFormatter()
    dateformatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ssZ"
    return dateformatter.string(from: Date())
  }
  
                        //13 bike/car log

func log(structObject: inout [ParkingLog] ){
      if structObject.count == 0{
      print("No log found")
      return
    }
    print("""
                LOG DETAILS
                ===========
         """)
    structObject.forEach{vehicle in
      print("""
                      
            Number         : \(vehicle.vehicleNumber)
            Slot           : \(vehicle.slotNumber)
            Park date      : \(vehicle.fromDate)
            Departing date : \(vehicle.toDate ?? "")
            \n
           """)
    }}
}  
extension String{
  func toInt() -> Int{
  return Int(self) ?? 0
}}

let parking = Parking()
parking.totalSlots()
